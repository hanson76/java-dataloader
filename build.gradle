import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
	id "biz.aQute.bnd.builder" version "6.2.0"
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}


def getDevelopmentVersion() {
    def output = new StringBuilder()
    def error = new StringBuilder()
    def gitShortHash = ["git", "-C", projectDir.toString(), "rev-parse", "--short", "HEAD"].execute()
    gitShortHash.waitForProcessOutput(output, error)
    def gitHash = output.toString().trim()
    if (gitHash.isEmpty()) {
        println "git hash is empty: error: ${error.toString()}"
        throw new IllegalStateException("git hash could not be determined")
    }
    def version = new SimpleDateFormat('yyyy-MM-dd\'T\'HH-mm-ss').format(new Date()) + "-" + gitHash
    println "created development version: $version"
    version
}

if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
    def msg = String.format("This build must be run with java 1.8 - you are running %s - gradle finds the JDK via JAVA_HOME=%s",
            JavaVersion.current(), System.getenv("JAVA_HOME"))
    throw new IllegalStateException(msg)
}


sourceCompatibility = 1.8
targetCompatibility = 1.8
def slf4jVersion = '1.7.30'
def releaseVersion = System.env.RELEASE_VERSION
version = releaseVersion ? releaseVersion : getDevelopmentVersion()
group = 'com.graphql-java'
description = 'A pure Java 8 port of Facebook Dataloader'

gradle.buildFinished { buildResult ->
    println "*******************************"
    println "*"
    if (buildResult.failure != null) {
        println "* FAILURE - ${buildResult.failure}"
    } else {
        println "* SUCCESS"
    }
    println "* Version: $version"
    println "*"
    println "*******************************"
}

repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'groovy'

jar {
    manifest {
        attributes('Automatic-Module-Name': 'com.graphqljava.dataloader',
		'-exportcontents': 'org.dataloader.*',
		'-removeheaders': 'Private-Package')
    }
}

dependencies {
    api 'org.slf4j:slf4j-api:' + slf4jVersion
    testImplementation 'org.slf4j:slf4j-simple:' + slf4jVersion
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.awaitility:awaitility:2.0.0'
    testImplementation 'com.github.ben-manes.caffeine:caffeine:2.9.0'
}

task sourcesJar(type: Jar) {
    dependsOn classes
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options.encoding = 'UTF-8'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

publishing {
    publications {
        graphqlJava(MavenPublication) {
            from components.java
            groupId 'com.graphql-java'
            artifactId 'java-dataloader'
            version project.version

            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'java-dataloader'
                    description 'A pure Java 8 port of Facebook Dataloader'
                    url 'https://github.com/graphql-java/java-dataloader'
                    inceptionYear '2017'

                    scm {
                        url 'https://github.com/graphql-java/java-dataloader'
                        connection 'scm:git@github.com:graphql-java/java-dataloader.git'
                        developerConnection 'scm:git@github.com:graphql-java/java-dataloader.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'bbakerman'
                            name 'Brad Baker'
                            email 'bbakerman@gmail.com'
                        }
                        developer {
                            id 'aschrijver'
                            name 'Arnold Schrijver'
                        }
                    }
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.env.MAVEN_CENTRAL_USER
            password = System.env.MAVEN_CENTRAL_PASSWORD
        }
    }
}

signing {
    def signingKey = System.env.MAVEN_CENTRAL_PGP_KEY
    useInMemoryPgpKeys(signingKey, "")
    sign publishing.publications
}


// all publish tasks depend on the build task
tasks.withType(PublishToMavenRepository) {
    dependsOn build
}


task myWrapper(type: Wrapper) {
    gradleVersion = '6.6.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

